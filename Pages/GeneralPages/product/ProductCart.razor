@page "/cart"
@inject SalesDbContext _db
@inject IHttpContextAccessor _context
@inject  MainService _main
<main class="main">
	<div class="page-header text-center" style="background-image: url('assets/images/page-header-bg.jpg')">
		<div class="container">
			<h1 class="page-title">Shopping Cart<span>Shop</span></h1>
		</div><!-- End .container -->
	</div><!-- End .page-header -->
	<nav aria-label="breadcrumb" class="breadcrumb-nav">
		<div class="container">
			<ol class="breadcrumb">
				<li class="breadcrumb-item"><a href="index.html">Home</a></li>
				<li class="breadcrumb-item"><a href="#">Shop</a></li>
				<li class="breadcrumb-item active" aria-current="page">Shopping Cart</li>
			</ol>
		</div><!-- End .container -->
	</nav><!-- End .breadcrumb-nav -->

	<div class="page-content">
		<div class="cart">
			<div class="container">
				<div class="row">
					<div class="col-lg-9">
						<table class="table table-cart table-mobile">
							<thead>
								<tr>
									<th>Product</th>
									<th>Price</th>
									<th>Quantity</th>
									<th>Total</th>
									<th></th>
								</tr>
							</thead>

							<tbody>
								@if(cart.Value.Count() != 0)
								{
									@foreach (var item in cart.Value)
									{
										<tr>
											<td class="product-col">
												<div class="product">
													<figure class="product-media">
														<a href="@item.Image">
															<img src="@item.Image" alt="Product image">
														</a>
													</figure>

													<h3 class="product-title">
														@item.ProductName
													</h3><!-- End .product-title -->
												</div><!-- End .product -->
											</td>
											<td class="price-col">$@item.Price</td>
											<td class="quantity-col">
												<div>
													<button @onclick="@(()=> Increment(item))" class="btn btn-sm btn-default btn-outline-success"> + </button>
													<input type="number" class="form-control" value="@item.Quantity" min="1" max="10" step="1" data-decimals="0" required>
												    <button @onclick="@(()=> Decrement(item))" class="btn btn-sm btn-default  btn-outline-success"> - </button>
												</div><!-- End .cart-product-quantity -->
											</td>
											<td class="total-col">$@(item.Price * item.Quantity)</td>
											<td class="remove-col"><button @onclick="@(()=> Remove(item))" class="btn-remove"><i class="icon-close"></i></button></td>
										</tr>

									}
								}
								@if(cart.Value.Count() == 0)
								{
									<tr>
										<td>No product in cart</td>
									</tr>
								}
							</tbody>
						</table><!-- End .table table-wishlist -->

						<div class="cart-bottom">
							<div class="cart-discount">
								<form action="#">
									<div class="input-group">
										<input type="text" class="form-control" required placeholder="coupon code">
										<div class="input-group-append">
											<button class="btn btn-outline-primary-2" type="submit"><i class="icon-long-arrow-right"></i></button>
										</div><!-- .End .input-group-append -->
									</div><!-- End .input-group -->
								</form>
							</div><!-- End .cart-discount -->

							<button @onclick="@(async ()=> await GetAll())" class="btn btn-outline-dark-2"><span>UPDATE CART</span><i class="icon-refresh"></i></button>
						</div><!-- End .cart-bottom -->
					</div><!-- End .col-lg-9 -->
					<aside class="col-lg-3">
						<div class="summary summary-cart">
							<h3 class="summary-title">Cart Total</h3><!-- End .summary-title -->

							<table class="table table-summary">
								<tbody>
									<tr class="summary-subtotal">
										<td>Subtotal:</td>
										<td>$@(total).00</td>
									</tr><!-- End .summary-subtotal -->
									<tr class="summary-shipping">
										<td>Shipping:</td>
										<td>&nbsp;</td>
									</tr>

									<tr class="summary-shipping-row">
										<td>
											<div class="custom-control custom-radio">
												<input type="radio"class="custom-control-input">
												<label class="custom-control-label" for="free-shipping">Free Shipping</label>
											</div><!-- End .custom-control -->
										</td>
										<td>$0.00</td>
									</tr><!-- End .summary-shipping-row -->

									<tr class="summary-shipping-row">
										<td>
											<div class="custom-control custom-radio">
												<input type="radio" class="custom-control-input">
												<label class="custom-control-label" for="free-shipping">Cash on delivery</label>
											</div><!-- End .custom-control -->
										</td>
										<td>$12.00</td>
									</tr><!-- End .summary-shipping-row -->

									

									<tr class="summary-shipping-estimate">
										<td>Estimate for Your Country<br> <a href="dashboard.html">Change address</a></td>
										<td>&nbsp;</td>
									</tr><!-- End .summary-shipping-estimate -->

									<tr class="summary-total">
										<td>Total:</td>
										<td>$@(total).00</td>
									</tr><!-- End .summary-total -->
								</tbody>
							</table><!-- End .table table-summary -->

							<a href="/summary" class="btn btn-outline-primary-2 btn-order btn-block">PROCEED TO CHECKOUT</a>
						</div><!-- End .summary -->

						<a href="/products" class="btn btn-outline-dark-2 btn-block mb-3"><span>CONTINUE SHOPPING</span><i class="icon-refresh"></i></a>
					</aside><!-- End .col-lg-3 -->
				</div><!-- End .row -->
			</div><!-- End .container -->
		</div><!-- End .cart -->
	</div><!-- End .page-content -->
</main><!-- End .main -->

@code{

	public BehaviorSubject<List<CartProduct>> cart = new BehaviorSubject<List<CartProduct>>(new List<CartProduct>());
	public double total;
	public double price;

	protected override async Task OnInitializedAsync()
	{
		await GetAll();
		await base.OnInitializedAsync();
	}
	private async Task GetAll()
	{
		try
		{   
			/** fetch cart products **/
			var entity = await _main.FetchCart();
			/** populate cart **/
			cart.OnNext(entity);
			total = cart.Value.Select(x => (x.Price * x.Quantity)).Sum();


		}
		catch(Exception e)
		{
			Console.WriteLine(e);
		}
	}

	public async Task Increment(CartProduct product)
	{
		try
		{
			if (product.Quantity < 10)
			{
				++product.Quantity ;
				_db.CartProducts.Update(product);
				await _db.SaveChangesAsync();
				await GetAll();
			}


		}
		catch(Exception e)
		{
			Console.WriteLine(e);
		}
	}

	public async Task Decrement(CartProduct product)
	{
		try
		{
			if(product.Quantity > 1)
			{
				--product.Quantity;
				_db.CartProducts.Update(product);
				await _db.SaveChangesAsync();
				await GetAll();
			}
		}
		catch(Exception e)
		{
			Console.WriteLine(e);
		}
	}

	public async Task Remove(CartProduct product)
	{
		try
		{
			_db.CartProducts.Remove(product);
			await _db.SaveChangesAsync();
			await GetAll();
		}
        catch(Exception e)
        {
            Console.WriteLine(e);
        }
    }
}